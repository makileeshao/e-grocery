var BUDGET = 'budget-';var LS_KEY_PRODUCT_LIST = 'products';var LS_KEY_STORE_LIST = 'stores';// setupfunction setupStorage(){    // localStorage.clear();        // init products    if(localStorage.getItem(LS_KEY_PRODUCT_LIST)){        console.log('existing setup');    }    else{        console.log('setting up products...');                var arrProducts = new Array(1);        var index = -1;                index++;        var objProduct = new Object();        objProduct.id = index;        objProduct.name = 'Haha';        objProduct.price = 10;        objProduct.remarks = 'test product ' + index;        arrProducts[index] = objProduct;                index++;        objProduct = new Object();        objProduct.id = index;        objProduct.name = 'Haha';        objProduct.price = 10;        objProduct.remarks = 'test product ' + index;        arrProducts[index] = objProduct;                console.log('clearing localstorage...');        localStorage.clear();                console.log('loading data into localstorage...');        console.log('storing: ' + JSON.stringify(arrProducts));        localStorage.setItem(LS_KEY_PRODUCT_LIST, JSON.stringify(arrProducts));    }}function storage_getProducts(){    return JSON.parse(localStorage.getItem(LS_KEY_PRODUCT_LIST));}function storage_addProduct(sName, sPrice, sRemarks, barCode, barCodeType){    var objProduct = new Object();    var nPrice = parseFloat(sPrice);        // generate index (length + 1)    var arrProducts = storage_getProducts();    objProduct.id = arrProducts.length;    objProduct.name = sName;    objProduct.price = nPrice;    objProduct.remarks = sRemarks;    objProduct.barcode = barCode;    objProduct.barcode_type = barCodeType;        arrProducts[objProduct.id] = objProduct;    localStorage.setItem(LS_KEY_PRODUCT_LIST, JSON.stringify(arrProducts));}function storage_removeAllProducts(){    var arrProducts = storage_getProducts();    arrProducts.splice(0, arrProducts.length);        console.log('after cleaing... ' + JSON.stringify(arrProducts));    localStorage.setItem(LS_KEY_PRODUCT_LIST, JSON.stringify(arrProducts));}function storage_RefreshList_UL(element_id){    console.log('element_id: ' + element_id);    $('#' + element_id).empty();        try{        var arrProducts = storage_getProducts();        console.log('storage_RefreshList_UL() ' + arrProducts.length);        if(arrProducts.length > 0){            var sItemList = "<ul id='ul_item_list' data-role='listview'>";            var sTempLI = '';            for(var i = 0; i < arrProducts.length; i++){                console.log('sItemList-before: ' + sItemList);                                // append item details                sTempLI = '<li>';                sTempLI = sTempLI + '<h2>' + arrProducts[i].name + ' ... $' + arrProducts[i].price + '</h2>';                sTempLI = sTempLI + '<p>' + arrProducts[i].remarks + '</p>';                sTempLI = sTempLI + '</li>';                console.log('sTempLI: ' + sTempLI);                                sItemList = sItemList + sTempLI;                console.log('sItemList-after: ' + sItemList);            }                        sItemList = sItemList + '</ul>';            $('#' + element_id).append(sItemList);            $('#' + element_id).trigger('create');                                   console.log('success');                    }        else{            $('#' + element_id).append("<ul id='ul_item_list' data-role='listview'><li>(no item)</li></ul>");            $('#' + element_id).trigger('create');        }    }catch(err){         e_alert('error: ' + err.description);    }}// Storesfunction storage_addStore(objStore){        // generate index (length + 1)    var arrStores = storage_getStores();        if(arrStores != null){        objStore.id = arrStores.length;    }    else{        arrStores = new Array(1);        objStore.id = 0;    }        arrStores[objStore.id] = objStore;    localStorage.setItem(LS_KEY_STORE_LIST, JSON.stringify(arrStores));}function storage_getStores(){    console.log('storage_getStores()');    var obj = JSON.parse(localStorage.getItem(LS_KEY_STORE_LIST), '');        console.log('storage_getStores() obj: ' + obj);        return obj;}function storage_removeAllStores(){    var arrStores = storage_getStores();    arrStores.splice(0, arrStores.length);        console.log('after clearing... ' + JSON.stringify(arrStores));    localStorage.setItem(LS_KEY_STORE_LIST, JSON.stringify(arrStores));}function storage_RefreshList_Stores(element_id){    console.log('element_id: ' + element_id);    $('#' + element_id).empty();        try{        var arrStores = storage_getStores();        if(arrStores != null && arrStores.length > 0){            console.log('storage_RefreshList_Stores() ' + arrStores.length);            var sItemList = "<ul id='ul_store_list' data-role='listview'>";            var sTempLI = '';            for(var i = 0; i < arrStores.length; i++){                console.log('sItemList-before: ' + sItemList);                                // append item details                sTempLI = '<li>';                sTempLI = sTempLI + '<h2>' + arrStores[i].name + '</h2>';                sTempLI = sTempLI + '<p>' + arrStores[i].remarks + '</p>';                sTempLI = sTempLI + '</li>';                console.log('sTempLI: ' + sTempLI);                                sItemList = sItemList + sTempLI;                console.log('sItemList-after: ' + sItemList);            }                        sItemList = sItemList + '</ul>';            $('#' + element_id).append(sItemList);            $('#' + element_id).trigger('create');                                   console.log('success');                    }        else{            $('#' + element_id).append("<ul id='ul_store_list' data-role='listview'><li>(no store)</li></ul>");            $('#' + element_id).trigger('create');        }    }catch(err){         e_alert('error: ' + err.description);    }}// Budgetfunction storage_budget_saveBudget(sYYYYMM, sAmount){    var boolStatus = false;    try{        var nAmount = parseFloat(sAmount);        localStorage.setItem(BUDGET + sYYYYMM, nAmount);        boolStatus = true;    }    catch(err){        console.error('storage_budget_saveBudget() - ' + err.description);        e_alert('Error: ' + err.description);    }        return boolStatus;}function storage_budget_retrieveBudget(sYYYYMM){    return parseFloat(localStorage.getItem(BUDGET + sYYYYMM));}